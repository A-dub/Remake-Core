# This is a basic workflow to help you get started with Actions

name: Test Dll

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    # The container image to pull from dockerhub
    container: microsoft/dotnet:latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout
      uses: actions/checkout@v2

    # Install nuget packages
    - name: Enter core project
      run: cd SubterfugeCore
    - name: Install NuGet packages
      run: dotnet restore
    - name: Build DLL
      run: dotnet build
    - name: Move to root
      run: cd ..
    - name: Move to Test project
      run: cd SubterfugeCoreTest
    - name: Run tests
      run: dotnet test
  # A step to build docfx documents using a differnt container with docfx installed to PATH
  upload-docs:
    runs-on: ubuntu-18.04
    container: erothejoker/docker-docfx:latest
    steps:
    # Run the docfx generation command.
    - name: Generate docs
      run: docfx SubterfugeCore/docfx.json
    # Publish the docs to the gh-pages branch for github pages
    - name: Publish Docs
      uses: JamesIves/github-pages-deploy-action@releases/v3
      with:
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        BRANCH: gh-pages
        FOLDER: SubterfugeCore/_site
    # Create a release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    # The container image to pull from dockerhub
    container: microsoft/dotnet:latest
    # Test and upload-docs must both succeed before deploying a release
    needs: [test, upload-docs]
    steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout
      uses: actions/checkout@v2

    # Install nuget packages
    - name: Enter core project
      run: cd SubterfugeCore
    - name: Install NuGet packages
      run: dotnet restore
    - name: Build DLL
      run: dotnet build
    - name: Move to root
      run: cd ..
    # Upload the DLL to the release
    - name: Upload Core DLL
      id: upload-release-dll
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./SubterfugeCore/bin/Debug/netcoreapp2.0/SubterfugeCore.dll
        asset_name: SubterfugeCore.dll
        asset_content_type: application/x-msdownload
    # Upload the CLI dll to the release
    - name: Upload CLI DLL
      id: upload-release-cli
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./SubterfugeCoreCLI/bin/Debug/netcoreapp2.1/SubterfugeCoreCLI.dll
        asset_name: SubterfugeCoreCLI.dll
        asset_content_type: application/x-msdownload
